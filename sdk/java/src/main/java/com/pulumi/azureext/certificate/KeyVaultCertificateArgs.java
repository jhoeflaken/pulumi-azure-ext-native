// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azureext.certificate;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyVaultCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyVaultCertificateArgs Empty = new KeyVaultCertificateArgs();

    @Import(name="base64EncodedCertificate", required=true)
    private Output<String> base64EncodedCertificate;

    public Output<String> base64EncodedCertificate() {
        return this.base64EncodedCertificate;
    }

    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="vaultName", required=true)
    private Output<String> vaultName;

    public Output<String> vaultName() {
        return this.vaultName;
    }

    private KeyVaultCertificateArgs() {}

    private KeyVaultCertificateArgs(KeyVaultCertificateArgs $) {
        this.base64EncodedCertificate = $.base64EncodedCertificate;
        this.password = $.password;
        this.tags = $.tags;
        this.vaultName = $.vaultName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyVaultCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyVaultCertificateArgs $;

        public Builder() {
            $ = new KeyVaultCertificateArgs();
        }

        public Builder(KeyVaultCertificateArgs defaults) {
            $ = new KeyVaultCertificateArgs(Objects.requireNonNull(defaults));
        }

        public Builder base64EncodedCertificate(Output<String> base64EncodedCertificate) {
            $.base64EncodedCertificate = base64EncodedCertificate;
            return this;
        }

        public Builder base64EncodedCertificate(String base64EncodedCertificate) {
            return base64EncodedCertificate(Output.of(base64EncodedCertificate));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder vaultName(Output<String> vaultName) {
            $.vaultName = vaultName;
            return this;
        }

        public Builder vaultName(String vaultName) {
            return vaultName(Output.of(vaultName));
        }

        public KeyVaultCertificateArgs build() {
            if ($.base64EncodedCertificate == null) {
                throw new MissingRequiredPropertyException("KeyVaultCertificateArgs", "base64EncodedCertificate");
            }
            if ($.vaultName == null) {
                throw new MissingRequiredPropertyException("KeyVaultCertificateArgs", "vaultName");
            }
            return $;
        }
    }

}
