// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureExt.Certificate
{
    /// <summary>
    /// An Azure key vault certificate.
    /// </summary>
    [AzureExtResourceType("azure-ext:certificate:KeyVaultCertificate")]
    public partial class KeyVaultCertificate : global::Pulumi.CustomResource
    {
        [Output("base64EncodedCertificate")]
        public Output<string> Base64EncodedCertificate { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        [Output("secretId")]
        public Output<string> SecretId { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("vaultName")]
        public Output<string> VaultName { get; private set; } = null!;

        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a KeyVaultCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KeyVaultCertificate(string name, KeyVaultCertificateArgs args, CustomResourceOptions? options = null)
            : base("azure-ext:certificate:KeyVaultCertificate", name, args ?? new KeyVaultCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KeyVaultCertificate(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-ext:certificate:KeyVaultCertificate", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KeyVaultCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KeyVaultCertificate Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new KeyVaultCertificate(name, id, options);
        }
    }

    public sealed class KeyVaultCertificateArgs : global::Pulumi.ResourceArgs
    {
        [Input("base64EncodedCertificate", required: true)]
        public Input<string> Base64EncodedCertificate { get; set; } = null!;

        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vaultName", required: true)]
        public Input<string> VaultName { get; set; } = null!;

        public KeyVaultCertificateArgs()
        {
        }
        public static new KeyVaultCertificateArgs Empty => new KeyVaultCertificateArgs();
    }
}
