// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificate

import (
	"context"
	"reflect"

	"errors"
	"github.com/jhoeflaken/pulumi-azure-ext/provider/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Azure key vault certificate.
type KeyVaultCertificate struct {
	pulumi.CustomResourceState

	Base64EncodedCertificate pulumi.StringOutput    `pulumi:"base64EncodedCertificate"`
	Name                     pulumi.StringOutput    `pulumi:"name"`
	Password                 pulumi.StringPtrOutput `pulumi:"password"`
	SecretId                 pulumi.StringOutput    `pulumi:"secretId"`
	Tags                     pulumi.StringMapOutput `pulumi:"tags"`
	VaultName                pulumi.StringOutput    `pulumi:"vaultName"`
	Version                  pulumi.StringOutput    `pulumi:"version"`
}

// NewKeyVaultCertificate registers a new resource with the given unique name, arguments, and options.
func NewKeyVaultCertificate(ctx *pulumi.Context,
	name string, args *KeyVaultCertificateArgs, opts ...pulumi.ResourceOption) (*KeyVaultCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Base64EncodedCertificate == nil {
		return nil, errors.New("invalid value for required argument 'Base64EncodedCertificate'")
	}
	if args.VaultName == nil {
		return nil, errors.New("invalid value for required argument 'VaultName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyVaultCertificate
	err := ctx.RegisterResource("azure-ext:certificate:KeyVaultCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyVaultCertificate gets an existing KeyVaultCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyVaultCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyVaultCertificateState, opts ...pulumi.ResourceOption) (*KeyVaultCertificate, error) {
	var resource KeyVaultCertificate
	err := ctx.ReadResource("azure-ext:certificate:KeyVaultCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyVaultCertificate resources.
type keyVaultCertificateState struct {
}

type KeyVaultCertificateState struct {
}

func (KeyVaultCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyVaultCertificateState)(nil)).Elem()
}

type keyVaultCertificateArgs struct {
	Base64EncodedCertificate string            `pulumi:"base64EncodedCertificate"`
	Password                 *string           `pulumi:"password"`
	Tags                     map[string]string `pulumi:"tags"`
	VaultName                string            `pulumi:"vaultName"`
}

// The set of arguments for constructing a KeyVaultCertificate resource.
type KeyVaultCertificateArgs struct {
	Base64EncodedCertificate pulumi.StringInput
	Password                 pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
	VaultName                pulumi.StringInput
}

func (KeyVaultCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyVaultCertificateArgs)(nil)).Elem()
}

type KeyVaultCertificateInput interface {
	pulumi.Input

	ToKeyVaultCertificateOutput() KeyVaultCertificateOutput
	ToKeyVaultCertificateOutputWithContext(ctx context.Context) KeyVaultCertificateOutput
}

func (*KeyVaultCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCertificate)(nil)).Elem()
}

func (i *KeyVaultCertificate) ToKeyVaultCertificateOutput() KeyVaultCertificateOutput {
	return i.ToKeyVaultCertificateOutputWithContext(context.Background())
}

func (i *KeyVaultCertificate) ToKeyVaultCertificateOutputWithContext(ctx context.Context) KeyVaultCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateOutput)
}

// KeyVaultCertificateArrayInput is an input type that accepts KeyVaultCertificateArray and KeyVaultCertificateArrayOutput values.
// You can construct a concrete instance of `KeyVaultCertificateArrayInput` via:
//
//	KeyVaultCertificateArray{ KeyVaultCertificateArgs{...} }
type KeyVaultCertificateArrayInput interface {
	pulumi.Input

	ToKeyVaultCertificateArrayOutput() KeyVaultCertificateArrayOutput
	ToKeyVaultCertificateArrayOutputWithContext(context.Context) KeyVaultCertificateArrayOutput
}

type KeyVaultCertificateArray []KeyVaultCertificateInput

func (KeyVaultCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyVaultCertificate)(nil)).Elem()
}

func (i KeyVaultCertificateArray) ToKeyVaultCertificateArrayOutput() KeyVaultCertificateArrayOutput {
	return i.ToKeyVaultCertificateArrayOutputWithContext(context.Background())
}

func (i KeyVaultCertificateArray) ToKeyVaultCertificateArrayOutputWithContext(ctx context.Context) KeyVaultCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateArrayOutput)
}

// KeyVaultCertificateMapInput is an input type that accepts KeyVaultCertificateMap and KeyVaultCertificateMapOutput values.
// You can construct a concrete instance of `KeyVaultCertificateMapInput` via:
//
//	KeyVaultCertificateMap{ "key": KeyVaultCertificateArgs{...} }
type KeyVaultCertificateMapInput interface {
	pulumi.Input

	ToKeyVaultCertificateMapOutput() KeyVaultCertificateMapOutput
	ToKeyVaultCertificateMapOutputWithContext(context.Context) KeyVaultCertificateMapOutput
}

type KeyVaultCertificateMap map[string]KeyVaultCertificateInput

func (KeyVaultCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyVaultCertificate)(nil)).Elem()
}

func (i KeyVaultCertificateMap) ToKeyVaultCertificateMapOutput() KeyVaultCertificateMapOutput {
	return i.ToKeyVaultCertificateMapOutputWithContext(context.Background())
}

func (i KeyVaultCertificateMap) ToKeyVaultCertificateMapOutputWithContext(ctx context.Context) KeyVaultCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateMapOutput)
}

type KeyVaultCertificateOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCertificate)(nil)).Elem()
}

func (o KeyVaultCertificateOutput) ToKeyVaultCertificateOutput() KeyVaultCertificateOutput {
	return o
}

func (o KeyVaultCertificateOutput) ToKeyVaultCertificateOutputWithContext(ctx context.Context) KeyVaultCertificateOutput {
	return o
}

func (o KeyVaultCertificateOutput) Base64EncodedCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyVaultCertificate) pulumi.StringOutput { return v.Base64EncodedCertificate }).(pulumi.StringOutput)
}

func (o KeyVaultCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyVaultCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o KeyVaultCertificateOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultCertificate) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o KeyVaultCertificateOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyVaultCertificate) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

func (o KeyVaultCertificateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KeyVaultCertificate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o KeyVaultCertificateOutput) VaultName() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyVaultCertificate) pulumi.StringOutput { return v.VaultName }).(pulumi.StringOutput)
}

func (o KeyVaultCertificateOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyVaultCertificate) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type KeyVaultCertificateArrayOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyVaultCertificate)(nil)).Elem()
}

func (o KeyVaultCertificateArrayOutput) ToKeyVaultCertificateArrayOutput() KeyVaultCertificateArrayOutput {
	return o
}

func (o KeyVaultCertificateArrayOutput) ToKeyVaultCertificateArrayOutputWithContext(ctx context.Context) KeyVaultCertificateArrayOutput {
	return o
}

func (o KeyVaultCertificateArrayOutput) Index(i pulumi.IntInput) KeyVaultCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyVaultCertificate {
		return vs[0].([]*KeyVaultCertificate)[vs[1].(int)]
	}).(KeyVaultCertificateOutput)
}

type KeyVaultCertificateMapOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyVaultCertificate)(nil)).Elem()
}

func (o KeyVaultCertificateMapOutput) ToKeyVaultCertificateMapOutput() KeyVaultCertificateMapOutput {
	return o
}

func (o KeyVaultCertificateMapOutput) ToKeyVaultCertificateMapOutputWithContext(ctx context.Context) KeyVaultCertificateMapOutput {
	return o
}

func (o KeyVaultCertificateMapOutput) MapIndex(k pulumi.StringInput) KeyVaultCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyVaultCertificate {
		return vs[0].(map[string]*KeyVaultCertificate)[vs[1].(string)]
	}).(KeyVaultCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVaultCertificateInput)(nil)).Elem(), &KeyVaultCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVaultCertificateArrayInput)(nil)).Elem(), KeyVaultCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVaultCertificateMapInput)(nil)).Elem(), KeyVaultCertificateMap{})
	pulumi.RegisterOutputType(KeyVaultCertificateOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificateArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificateMapOutput{})
}
